"""Create Application."""

from fastapi import FastAPI
from fastapi import HTTPException as Fastapi_HTTPException
from fastapi.responses import JSONResponse
from fastapi.exceptions import RequestValidationError
from starlette.status import (
    HTTP_404_NOT_FOUND,
    HTTP_500_INTERNAL_SERVER_ERROR,
)
from middleware import fastapiMiddleware
from exceptionsFastapi import http_exception, parameters_error, not_found, server_error
from utils import rnd


app = FastAPI()
app.add_exception_handler(RequestValidationError, parameters_error)
app.add_exception_handler(HTTP_404_NOT_FOUND, not_found)
app.add_exception_handler(HTTP_500_INTERNAL_SERVER_ERROR, server_error)
app.add_exception_handler(Fastapi_HTTPException, http_exception)
app.add_middleware(fastapiMiddleware)


@app.get("/")
async def root():
    """Heartbeat response.

    :return: hello world hearbeat string
    """
    return JSONResponse({"detail": "Hello World"}, status_code=200)


@app.get("/randomnumber")
async def randomnumber(size: int = 1):
    """generate a random number of size in bytes.

    :return: random number
    """
    print("[app.py].[randomnumber] begin")
    n = rnd(size)
    response = JSONResponse({"detail": f"Random number {n}"}, status_code=200)
    print("[app.py].[randomnumber] end")
    return response


@app.get("/wrongtypeargument")
async def wrongtypeargument(id: int):
    # raise an exception without handling it
    return JSONResponse({"detail": f"wrongtypeargument id = {id}"}, status_code=200)


@app.get("/dangerous")
async def dangerous():
    # raise an exception without handling it
    x = 1 / 0
    return JSONResponse(
        {"detail": f"We should never get here; the value of x = {x}"}, status_code=200
    )


@app.get("/exception400")
async def exception400():
    raise Fastapi_HTTPException(status_code=400)


@app.get("/exception400overwritten")
async def exception400overwritten():
    raise Fastapi_HTTPException(
        status_code=400, detail="The 400 error generated by the user."
    )


@app.get("/exception499")
async def exception499():
    raise Fastapi_HTTPException(status_code=499)


@app.get("/exception500")
async def exception500():
    raise Fastapi_HTTPException(status_code=500)


@app.get("/exception500overwritten")
async def exception500overwritten():
    raise Fastapi_HTTPException(
        status_code=500,
        detail="This is the 500 code exception from app, not from the handler.",
    )
