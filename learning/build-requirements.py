#!/usr/bin/env python
"""
Scans a folder for python modules and creates/updates the 'requirements.txt'
to add any missing import module from the python source code files.
"""
import sys
import os
import re


standardmodules = set([
    "ab",
    "aepac",
    "aetool",
    "aetype",
    "aif",
    "a",
    "A",
    "anydb",
    "applesingl",
    "argpars",
    "arra",
    "as",
    "asyncha",
    "asyncor",
    "atexi",
    "audioo",
    "autoGI",
    "base6",
    "BaseHTTPServe",
    "Bastio",
    "bd",
    "binasci",
    "binhe",
    "bisec",
    "bsdd",
    "buildtool",
    "bz",
    "calenda",
    "c",
    "cfmfil",
    "cg",
    "CGIHTTPServe",
    "cgit",
    "chun",
    "cmat",
    "cm",
    "cod",
    "codec",
    "codeo",
    "collection",
    "ColorPicke",
    "colorsy",
    "command",
    "compileal",
    "ConfigParse",
    "contextli",
    "Cooki",
    "cookieli",
    "cop",
    "copy_re",
    "cPickl",
    "cryp",
    "cStringI",
    "cs",
    "ctype",
    "datetim",
    "dbhas",
    "db",
    "decima",
    "DEVIC",
    "diffli",
    "dircach",
    "di",
    "d",
    "doctes",
    "DocXMLRPCServe",
    "dumbdb",
    "dummy_threa",
    "dummy_threadin",
    "EasyDialog",
    "ensurepi",
    "errn",
    "exception",
    "fcnt",
    "filecm",
    "fileinpu",
    "findertool",
    "f",
    "F",
    "fl",
    "f",
    "fnmatc",
    "formatte",
    "fpect",
    "fpforma",
    "fraction",
    "FrameWor",
    "ftpli",
    "functool",
    "g",
    "gdb",
    "gensuitemodul",
    "getop",
    "getpas",
    "gettex",
    "g",
    "G",
    "glo",
    "gr",
    "gzi",
    "hashli",
    "heap",
    "hma",
    "htmlentitydef",
    "htmlli",
    "HTMLParse",
    "httpli",
    "i",
    "icope",
    "imageo",
    "imapli",
    "imgfil",
    "imghd",
    "im",
    "importli",
    "imputi",
    "inspec",
    "i",
    "itertool",
    "jpe",
    "jso",
    "keywor",
    "lib2to",
    "linecach",
    "local",
    "macerror",
    "MacO",
    "macostool",
    "macpat",
    "macresourc",
    "mailbo",
    "mailca",
    "marsha",
    "mat",
    "md",
    "mhli",
    "mimetool",
    "mimetype",
    "MimeWrite",
    "mimif",
    "MiniAEFram",
    "mma",
    "modulefinde",
    "msili",
    "msvcr",
    "multifil",
    "mute",
    "Na",
    "netr",
    "ne",
    "ni",
    "nntpli",
    "number",
    "operato",
    "optpars",
    "o",
    "ossaudiode",
    "parse",
    "pd",
    "pickl",
    "pickletool",
    "pipe",
    "PixMapWrappe",
    "pkguti",
    "platfor",
    "plistli",
    "popen",
    "popli",
    "posi",
    "posixfil",
    "pprin",
    "profil",
    "pstat",
    "pt",
    "pw",
    "py_compil",
    "pyclb",
    "pydo",
    "Queu",
    "quopr",
    "rando",
    "r",
    "readlin",
    "resourc",
    "rexe",
    "rfc82",
    "rlcomplete",
    "robotparse",
    "runp",
    "sche",
    "ScrolledTex",
    "selec",
    "set",
    "sgmlli",
    "sh",
    "shelv",
    "shle",
    "shuti",
    "signa",
    "SimpleHTTPServe",
    "SimpleXMLRPCServe",
    "sit",
    "smtp",
    "smtpli",
    "sndhd",
    "socke",
    "SocketServe",
    "spw",
    "sqlite",
    "ss",
    "sta",
    "statvf",
    "strin",
    "StringI",
    "stringpre",
    "struc",
    "subproces",
    "suna",
    "sunaudiode",
    "SUNAUDIODE",
    "symbo",
    "symtabl",
    "sy",
    "sysconfi",
    "syslo",
    "tabnann",
    "tarfil",
    "telnetli",
    "tempfil",
    "termio",
    "textwra",
    "threa",
    "threadin",
    "tim",
    "timei",
    "Ti",
    "Tkinte",
    "toke",
    "tokeniz",
    "trac",
    "tracebac",
    "tt",
    "tt",
    "turtl",
    "type",
    "unicodedat",
    "unittes",
    "urlli",
    "urllib",
    "urlpars",
    "use",
    "UserDic",
    "UserLis",
    "UserStrin",
    "u",
    "uui",
    "videoreade",
    "",
    "warning",
    "wav",
    "weakre",
    "webbrowse",
    "whichd",
    "winsoun",
    "xdrli",
    "xmlrpcli",
    "zipfil",
    "zipimpor",
    "zlib"
])
        
def getimports(libpath):
    importmodules = set([])
    for filename in os.listdir(libpath):
        print "... found file {0}".format(filename)
        if filename.endswith(".py"):
            with open(filename) as infile:
                for line in infile:
                    cleanline = line.strip()
                    if cleanline.startswith('import') or cleanline.startswith('from'):
                        modulematch = re.match('\s*(import|from)\s+(?P<module>[A-Za-z][A-Za-z0-9_]*)', cleanline)
                        if modulematch:
                            modulename = modulematch.group('module')
                            if modulename not in standardmodules:
                                importmodules.add(modulename)
    return importmodules


if __name__ == "__main__":
    required = set([])
    libpaths = ['.']
    if len(sys.argv) > 1:
        libpaths = sys.argv[1:]
    print "... in Main, processing {0}".format(libpaths)
    for lpath in libpaths:
        required |= getimports(lpath)
    print required